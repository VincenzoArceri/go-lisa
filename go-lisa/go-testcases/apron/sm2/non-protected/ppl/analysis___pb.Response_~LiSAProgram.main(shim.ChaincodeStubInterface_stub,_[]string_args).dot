digraph {
	"node0" [shape="rect",color="black",label=<Avalbytes := [unresolved]GetState(stub, A)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ {  1Avalbytes -1open_call_ret_value@'go-testcases/apron/sm2/non-protected/ppl/sm.go':6:34 = 0 } ]]<BR/>}} -&gt; [Avalbytes]>];
	"node1" [shape="rect",color="gray",label=<Aval = -(Aval, X)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ {  1Bvalbytes -1open_call_ret_value@'go-testcases/apron/sm2/non-protected/ppl/sm.go':7:34 = 0 } ]]<BR/>}} -&gt; [Aval]>];
	"node2" [shape="rect",color="gray",label=<var X int = 0<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ {  1Bval = 0;  1Bvalbytes -1open_call_ret_value@'go-testcases/apron/sm2/non-protected/ppl/sm.go':7:34 = 0;  1Aval = 0;  1X = 0 } ]]<BR/>}} -&gt; [X]>];
	"node3" [shape="rect",color="gray",label=<Bval = [unresolved]Atoi([unresolved]string(Bvalbytes))<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ {  1Bvalbytes -1open_call_ret_value@'go-testcases/apron/sm2/non-protected/ppl/sm.go':7:34 = 0;  1X = 0 } ]]<BR/>}} -&gt; [Bval]>];
	"node4" [shape="rect",color="black",peripheries="2",label=<return [unresolved]Success(shim, nil)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ {  1open_call_ret_value@'go-testcases/apron/sm2/non-protected/ppl/sm.go':24:29 -1ret_value@main = 0 } ]]<BR/>}} -&gt; [ret_value@main]>];
	"node5" [shape="rect",color="gray",label=<Aval = [unresolved]Atoi([unresolved]string(Avalbytes))<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ {  1Bvalbytes -1open_call_ret_value@'go-testcases/apron/sm2/non-protected/ppl/sm.go':7:34 = 0;  1X = 0;  1Bval = 0 } ]]<BR/>}} -&gt; [Aval]>];
	"node6" [shape="rect",color="gray",label=<err = [unresolved]PutState(stub, A, ([]uint8)([unresolved]Itoa(Aval)))<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ {  1err -1open_call_ret_value@'go-testcases/apron/sm2/non-protected/ppl/sm.go':22:55 = 0 } ]]<BR/>}} -&gt; [err]>];
	"node7" [shape="rect",color="gray",label=<err = [unresolved]PutState(stub, B, ([]uint8)([unresolved]Itoa(Bval)))<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ {  1err -1open_call_ret_value@'go-testcases/apron/sm2/non-protected/ppl/sm.go':23:55 = 0 } ]]<BR/>}} -&gt; [err]>];
	"node8" [shape="rect",color="gray",label=<var B string = &quot;&quot;<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ {  1Bvalbytes -1open_call_ret_value@'go-testcases/apron/sm2/non-protected/ppl/sm.go':7:34 = 0 } ]]<BR/>}} -&gt; [B]>];
	"node9" [shape="rect",color="gray",label=<Bvalbytes := [unresolved]GetState(stub, B)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ {  1Bvalbytes -1open_call_ret_value@'go-testcases/apron/sm2/non-protected/ppl/sm.go':7:34 = 0 } ]]<BR/>}} -&gt; [Bvalbytes]>];
	"node10" [shape="rect",color="gray",label=<X = [unresolved]Atoi(args::2(args, 2))<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ {  1Bvalbytes -1open_call_ret_value@'go-testcases/apron/sm2/non-protected/ppl/sm.go':7:34 = 0 } ]]<BR/>}} -&gt; [X]>];
	"node11" [shape="rect",color="gray",label=<var A string = &quot;&quot;<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ {  1Bvalbytes -1open_call_ret_value@'go-testcases/apron/sm2/non-protected/ppl/sm.go':7:34 = 0 } ]]<BR/>}} -&gt; [A]>];
	"node12" [shape="rect",color="gray",label=<var Aval int = 0<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ {  1Aval = 0;  1Bvalbytes -1open_call_ret_value@'go-testcases/apron/sm2/non-protected/ppl/sm.go':7:34 = 0 } ]]<BR/>}} -&gt; [Aval]>];
	"node13" [shape="rect",color="gray",label=<var Bval int = 0<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ {  1Bvalbytes -1open_call_ret_value@'go-testcases/apron/sm2/non-protected/ppl/sm.go':7:34 = 0;  1Bval = 0;  1Aval = 0 } ]]<BR/>}} -&gt; [Bval]>];
	"node14" [shape="rect",color="gray",label=<Bval = +(Bval, X)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ {  1Bvalbytes -1open_call_ret_value@'go-testcases/apron/sm2/non-protected/ppl/sm.go':7:34 = 0 } ]]<BR/>}} -&gt; [Bval]>];
	"node0" -> "node9" [color="black"];
	"node1" -> "node14" [color="black"];
	"node2" -> "node5" [color="black"];
	"node3" -> "node10" [color="black"];
	"node5" -> "node3" [color="black"];
	"node6" -> "node7" [color="black"];
	"node7" -> "node4" [color="black"];
	"node8" -> "node12" [color="black"];
	"node9" -> "node11" [color="black"];
	"node10" -> "node1" [color="black"];
	"node11" -> "node8" [color="black"];
	"node12" -> "node13" [color="black"];
	"node13" -> "node2" [color="black"];
	"node14" -> "node6" [color="black"];
subgraph cluster_legend {
	label="Legend";
	style=dotted;
	node [shape=plaintext];
	"legend" [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0"><tr><td align="right">node border&nbsp;</td><td align="left"><font color="gray">gray</font>, single</td></tr><tr><td align="right">entrypoint border&nbsp;</td><td align="left"><font color="black">black</font>, single</td></tr><tr><td align="right">exitpoint border&nbsp;</td><td align="left"><font color="black">black</font>, double</td></tr><tr><td align="right">sequential edge&nbsp;</td><td align="left"><font color="black">black</font>, solid</td></tr><tr><td align="right">true edge&nbsp;</td><td align="left"><font color="blue">blue</font>, dashed</td></tr><tr><td align="right">false edge&nbsp;</td><td align="left"><font color="red">red</font>, dashed</td></tr></table>>];
}

}
