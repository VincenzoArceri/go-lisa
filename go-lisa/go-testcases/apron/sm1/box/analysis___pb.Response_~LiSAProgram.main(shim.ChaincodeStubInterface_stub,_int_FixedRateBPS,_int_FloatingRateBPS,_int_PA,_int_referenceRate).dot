digraph {
	"node0" [shape="rect",color="black",label=<referenceRateBytes := [unresolved]GetState(stub, +(&quot;rr&quot;, irs::ReferenceRate))<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ &lt;universal&gt; ]]<BR/>}} -&gt; [referenceRateBytes]>];
	"node1" [shape="rect",color="gray",label=<p1 := /(*(PA, FixedRateBPS), 100)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ &lt;universal&gt; ]]<BR/>}} -&gt; [p1]>];
	"node2" [shape="rect",color="black",peripheries="2",label=<return [unresolved]Success(shim, ([]uint8)(payment))<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ &lt;universal&gt; ]]<BR/>}} -&gt; [ret_value@main]>];
	"node3" [shape="rect",color="gray",label=<referenceRate := [unresolved]Atoi([unresolved]string(referenceRateBytes))<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ &lt;universal&gt; ]]<BR/>}} -&gt; [referenceRate]>];
	"node4" [shape="rect",color="gray",label=<p2 := /(*(PA, +(FloatingRateBPS, referenceRate)), 100)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ &lt;universal&gt; ]]<BR/>}} -&gt; [p2]>];
	"node5" [shape="rect",color="gray",label=<payment := [unresolved]Itoa(-(p1, p2))<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ &lt;universal&gt; ]]<BR/>}} -&gt; [payment]>];
	"node6" [shape="rect",color="gray",label=<err = [unresolved]PutState(stub, paymentID, ([]uint8)(payment))<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ &lt;universal&gt; ]]<BR/>}} -&gt; [err]>];
	"node1" -> "node4" [color="black"];
	"node0" -> "node3" [color="black"];
	"node3" -> "node1" [color="black"];
	"node4" -> "node5" [color="black"];
	"node5" -> "node6" [color="black"];
	"node6" -> "node2" [color="black"];
subgraph cluster_legend {
	label="Legend";
	style=dotted;
	node [shape=plaintext];
	"legend" [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0"><tr><td align="right">node border&nbsp;</td><td align="left"><font color="gray">gray</font>, single</td></tr><tr><td align="right">entrypoint border&nbsp;</td><td align="left"><font color="black">black</font>, single</td></tr><tr><td align="right">exitpoint border&nbsp;</td><td align="left"><font color="black">black</font>, double</td></tr><tr><td align="right">sequential edge&nbsp;</td><td align="left"><font color="black">black</font>, solid</td></tr><tr><td align="right">true edge&nbsp;</td><td align="left"><font color="blue">blue</font>, dashed</td></tr><tr><td align="right">false edge&nbsp;</td><td align="left"><font color="red">red</font>, dashed</td></tr></table>>];
}

}
