digraph {
	labelloc="t";
	label="untyped maps::emptyAllocs()";
	"node0" [shape="rect",color="black",label=<m := keyedLiteral(map[int32]int32)()<BR/><BR/>{ expressions: [m],<BR/>state: { heap: { m: [heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':10:22] },<BR/>type: { map: { m: [map[int32]int32] },<BR/>stack: [map[int32]int32] },<BR/>value: #TOP# }<BR/> }<BR/>>];
	"node3" [shape="rect",color="gray",label=<m::0(m, 0) = 0<BR/><BR/>{ expressions: [heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':10:22],<BR/>state: { heap: { m: [heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':10:22] },<BR/>type: { map: { heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':10:22: [int(untyped)],<BR/>m: [map[int32]int32] },<BR/>stack: [int(untyped)] },<BR/>value: { map: { heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':10:22: [0, 0] },<BR/>stack: [0, 0] }<BR/> }<BR/> }<BR/>>];
	"node8" [shape="rect",color="gray",label=<m::1(m, 1) = 86<BR/><BR/>{ expressions: [heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':10:22],<BR/>state: { heap: { m: [heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':10:22] },<BR/>type: { map: { heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':10:22: [int(untyped)],<BR/>m: [map[int32]int32] },<BR/>stack: [int(untyped)] },<BR/>value: { map: { heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':10:22: [0, 86] },<BR/>stack: [0, 86] }<BR/> }<BR/> }<BR/>>];
	"node13" [shape="rect",color="black",peripheries="2",label=<ret<BR/><BR/>{ expressions: [skip],<BR/>state: { heap: { m: [heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':10:22] },<BR/>type: { map: { heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':10:22: [int(untyped)],<BR/>m: [map[int32]int32] },<BR/>stack: _|_ },<BR/>value: { map: { heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':10:22: [0, 86] },<BR/>stack: _|_ }<BR/> }<BR/> }<BR/>>];
	"node0" -> "node3" [color="black"];
	"node3" -> "node8" [color="black"];
	"node8" -> "node13" [color="black"];
subgraph cluster_legend {
	label="Legend";
	style=dotted;
	node [shape=plaintext];
	"legend" [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0"><tr><td align="right">node border&nbsp;</td><td align="left"><font color="gray">gray</font>, single</td></tr><tr><td align="right">entrypoint border&nbsp;</td><td align="left"><font color="black">black</font>, single</td></tr><tr><td align="right">exitpoint border&nbsp;</td><td align="left"><font color="black">black</font>, double</td></tr><tr><td align="right">sequential edge&nbsp;</td><td align="left"><font color="black">black</font>, solid</td></tr><tr><td align="right">true edge&nbsp;</td><td align="left"><font color="blue">blue</font>, dashed</td></tr><tr><td align="right">false edge&nbsp;</td><td align="left"><font color="red">red</font>, dashed</td></tr></table>>];
}

}
