digraph {
	labelloc="t";
	label="untyped maps::alias()";
	"node0" [shape="rect",color="black",label=<m1 := keyedLiteral(map[int32]int32)(1, 2, 3)<BR/><BR/>{ expressions: [m1],<BR/>state: { heap: { m1: [heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':24:39] },<BR/>type: { map: { heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':24:39: [int(untyped)],<BR/>m1: [map[int32]int32] },<BR/>stack: [map[int32]int32] },<BR/>value: { map: { heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':24:39: [1, 3] },<BR/>stack: _|_ }<BR/> }<BR/> }<BR/>>];
	"node6" [shape="rect",color="gray",label=<m2 := m1<BR/><BR/>{ expressions: [m2],<BR/>state: { heap: { m1: [heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':24:39],<BR/>m2: [heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':25:1] },<BR/>type: { map: { heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':24:39: [int(untyped)],<BR/>heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':25:1: [int(untyped)],<BR/>m1: [map[int32]int32],<BR/>m2: [map[int32]int32] },<BR/>stack: [map[int32]int32] },<BR/>value: { map: { heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':24:39: [1, 3],<BR/>heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':25:1: [1, 3] },<BR/>stack: [1, 3] }<BR/> }<BR/> }<BR/>>];
	"node9" [shape="rect",color="gray",label=<m1::1(m1, 1) = 50<BR/><BR/>{ expressions: [heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':24:39],<BR/>state: { heap: { m1: [heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':24:39],<BR/>m2: [heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':25:1] },<BR/>type: { map: { heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':24:39: [int(untyped)],<BR/>heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':25:1: [int(untyped)],<BR/>m1: [map[int32]int32],<BR/>m2: [map[int32]int32] },<BR/>stack: [int(untyped)] },<BR/>value: { map: { heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':24:39: [1, 50],<BR/>heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':25:1: [1, 3] },<BR/>stack: [1, 50] }<BR/> }<BR/> }<BR/>>];
	"node14" [shape="rect",color="gray",label=<m2::2(m2, 2) = 100<BR/><BR/>{ expressions: [heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':25:1],<BR/>state: { heap: { m1: [heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':24:39],<BR/>m2: [heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':25:1] },<BR/>type: { map: { heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':24:39: [int(untyped)],<BR/>heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':25:1: [int(untyped)],<BR/>m1: [map[int32]int32],<BR/>m2: [map[int32]int32] },<BR/>stack: [int(untyped)] },<BR/>value: { map: { heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':24:39: [1, 50],<BR/>heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':25:1: [1, 100] },<BR/>stack: [1, 100] }<BR/> }<BR/> }<BR/>>];
	"node19" [shape="rect",color="black",peripheries="2",label=<ret<BR/><BR/>{ expressions: [skip],<BR/>state: { heap: { m1: [heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':24:39],<BR/>m2: [heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':25:1] },<BR/>type: { map: { heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':24:39: [int(untyped)],<BR/>heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':25:1: [int(untyped)],<BR/>m1: [map[int32]int32],<BR/>m2: [map[int32]int32] },<BR/>stack: _|_ },<BR/>value: { map: { heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':24:39: [1, 50],<BR/>heap[w]:pp@'go-testcases/collections/map/field-insensitive/map.go':25:1: [1, 100] },<BR/>stack: _|_ }<BR/> }<BR/> }<BR/>>];
	"node0" -> "node6" [color="black"];
	"node6" -> "node9" [color="black"];
	"node9" -> "node14" [color="black"];
	"node14" -> "node19" [color="black"];
subgraph cluster_legend {
	label="Legend";
	style=dotted;
	node [shape=plaintext];
	"legend" [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0"><tr><td align="right">node border&nbsp;</td><td align="left"><font color="gray">gray</font>, single</td></tr><tr><td align="right">entrypoint border&nbsp;</td><td align="left"><font color="black">black</font>, single</td></tr><tr><td align="right">exitpoint border&nbsp;</td><td align="left"><font color="black">black</font>, double</td></tr><tr><td align="right">sequential edge&nbsp;</td><td align="left"><font color="black">black</font>, solid</td></tr><tr><td align="right">true edge&nbsp;</td><td align="left"><font color="blue">blue</font>, dashed</td></tr><tr><td align="right">false edge&nbsp;</td><td align="left"><font color="red">red</font>, dashed</td></tr></table>>];
}

}
