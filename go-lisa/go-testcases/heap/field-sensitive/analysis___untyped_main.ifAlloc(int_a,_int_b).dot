digraph {
	"node0" [shape="rect",color="black",label=<==(a, b)<BR/>{{<BR/>heap [[ #TOP# ]]<BR/>value [[ a: [-Inf, +Inf]<BR/>b: [-Inf, +Inf]<BR/>[stack: [-Inf, +Inf]] ]]<BR/>}} -&gt; [a == b]>];
	"node1" [shape="rect",color="gray",label=<Close block: 'go-testcases/heap/field-sensitive/go-structs.go':30:8<BR/>{{<BR/>heap [[  ]]<BR/>value [[ a: [-Inf, +Inf]<BR/>b: [-Inf, +Inf]<BR/>heap[s]:pp@'go-testcases/heap/field-sensitive/go-structs.go':31:17[X]: [3, 3]<BR/>heap[s]:pp@'go-testcases/heap/field-sensitive/go-structs.go':31:17[Y]: [4, 4]<BR/>[stack: _|_] ]]<BR/>}} -&gt; []>];
	"node2" [shape="rect",color="black",peripheries="2",label=<ret<BR/>{{<BR/>heap [[  ]]<BR/>value [[ a: [-Inf, +Inf]<BR/>b: [-Inf, +Inf]<BR/>heap[s]:pp@'go-testcases/heap/field-sensitive/go-structs.go':29:17[X]: [1, 1]<BR/>heap[s]:pp@'go-testcases/heap/field-sensitive/go-structs.go':29:17[Y]: [2, 2]<BR/>heap[s]:pp@'go-testcases/heap/field-sensitive/go-structs.go':31:17[X]: [3, 3]<BR/>heap[s]:pp@'go-testcases/heap/field-sensitive/go-structs.go':31:17[Y]: [4, 4]<BR/>[stack: _|_] ]]<BR/>}} -&gt; [skip]>];
	"node3" [shape="rect",color="gray",label=<x := nonKeyedLit(Vertex)(1, 2)<BR/>{{<BR/>heap [[ x: [heap[s]:pp@'go-testcases/heap/field-sensitive/go-structs.go':29:17] ]]<BR/>value [[ ['go-testcases/heap/field-sensitive/go-structs.go':28:11]:a: [-Inf, +Inf]<BR/>['go-testcases/heap/field-sensitive/go-structs.go':28:11]:b: [-Inf, +Inf]<BR/>a: [-Inf, +Inf]<BR/>b: [-Inf, +Inf]<BR/>heap[s]:pp@'go-testcases/heap/field-sensitive/go-structs.go':29:17[X]: [1, 1]<BR/>heap[s]:pp@'go-testcases/heap/field-sensitive/go-structs.go':29:17[Y]: [2, 2]<BR/>[stack: _|_] ]]<BR/>}} -&gt; [x]>];
	"node4" [shape="rect",color="gray",label=<Close block: 'go-testcases/heap/field-sensitive/go-structs.go':28:11<BR/>{{<BR/>heap [[  ]]<BR/>value [[ a: [-Inf, +Inf]<BR/>b: [-Inf, +Inf]<BR/>heap[s]:pp@'go-testcases/heap/field-sensitive/go-structs.go':29:17[X]: [1, 1]<BR/>heap[s]:pp@'go-testcases/heap/field-sensitive/go-structs.go':29:17[Y]: [2, 2]<BR/>[stack: _|_] ]]<BR/>}} -&gt; []>];
	"node5" [shape="rect",color="gray",label=<Open block: 'go-testcases/heap/field-sensitive/go-structs.go':28:11<BR/>{{<BR/>heap [[ #TOP# ]]<BR/>value [[ ['go-testcases/heap/field-sensitive/go-structs.go':28:11]:a: [-Inf, +Inf]<BR/>['go-testcases/heap/field-sensitive/go-structs.go':28:11]:b: [-Inf, +Inf]<BR/>a: [-Inf, +Inf]<BR/>b: [-Inf, +Inf]<BR/>[stack: [-Inf, +Inf]] ]]<BR/>}} -&gt; [['go-testcases/heap/field-sensitive/go-structs.go':28:11]:a == ['go-testcases/heap/field-sensitive/go-structs.go':28:11]:b, a == b]>];
	"node6" [shape="rect",color="gray",label=<Open block: 'go-testcases/heap/field-sensitive/go-structs.go':30:8<BR/>{{<BR/>heap [[ #TOP# ]]<BR/>value [[ ['go-testcases/heap/field-sensitive/go-structs.go':30:8]:a: [-Inf, +Inf]<BR/>['go-testcases/heap/field-sensitive/go-structs.go':30:8]:b: [-Inf, +Inf]<BR/>a: [-Inf, +Inf]<BR/>b: [-Inf, +Inf]<BR/>[stack: [-Inf, +Inf]] ]]<BR/>}} -&gt; [['go-testcases/heap/field-sensitive/go-structs.go':30:8]:a == ['go-testcases/heap/field-sensitive/go-structs.go':30:8]:b, a == b]>];
	"node7" [shape="rect",color="gray",label=<x := nonKeyedLit(Vertex)(3, 4)<BR/>{{<BR/>heap [[ x: [heap[s]:pp@'go-testcases/heap/field-sensitive/go-structs.go':31:17] ]]<BR/>value [[ ['go-testcases/heap/field-sensitive/go-structs.go':30:8]:a: [-Inf, +Inf]<BR/>['go-testcases/heap/field-sensitive/go-structs.go':30:8]:b: [-Inf, +Inf]<BR/>a: [-Inf, +Inf]<BR/>b: [-Inf, +Inf]<BR/>heap[s]:pp@'go-testcases/heap/field-sensitive/go-structs.go':31:17[X]: [3, 3]<BR/>heap[s]:pp@'go-testcases/heap/field-sensitive/go-structs.go':31:17[Y]: [4, 4]<BR/>[stack: _|_] ]]<BR/>}} -&gt; [x]>];
	"node0" -> "node5" [color="blue",style="dashed"];
	"node0" -> "node6" [color="red",style="dashed"];
	"node1" -> "node2" [color="black"];
	"node3" -> "node4" [color="black"];
	"node4" -> "node2" [color="black"];
	"node5" -> "node3" [color="black"];
	"node6" -> "node7" [color="black"];
	"node7" -> "node1" [color="black"];
subgraph cluster_legend {
	label="Legend";
	style=dotted;
	node [shape=plaintext];
	"legend" [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0"><tr><td align="right">node border&nbsp;</td><td align="left"><font color="gray">gray</font>, single</td></tr><tr><td align="right">entrypoint border&nbsp;</td><td align="left"><font color="black">black</font>, single</td></tr><tr><td align="right">exitpoint border&nbsp;</td><td align="left"><font color="black">black</font>, double</td></tr><tr><td align="right">sequential edge&nbsp;</td><td align="left"><font color="black">black</font>, solid</td></tr><tr><td align="right">true edge&nbsp;</td><td align="left"><font color="blue">blue</font>, dashed</td></tr><tr><td align="right">false edge&nbsp;</td><td align="left"><font color="red">red</font>, dashed</td></tr></table>>];
}

}
